from time import sleep
import threading
from random import randrange

print_all_variables = False

counter_invalid_letter = 0

encripted_letters = []

start_encript = []

# Set alphabet(82 letters). 
alphabet =                  ('☺', '☻', '♥', '♦', '♣', '♠', '•', '◘', '○', '◙', '♂', '♀', '♪', '♫', '☼', '►', '◄', '↕', '‼', '¶', '§', '▬', '↨', '↑', '↓', '→', '←', '∟', '↔', '▲', '▼', 'A', '"', '#', '$', '%', '&', "'", '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '', '', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', 'Δ', '€', '‚', 'ƒ', '„', '…', '†', '‡', 'ˆ', '‰', 'Š', '‹', 'Œ', 'Ž', '‘', '’', '“', '”', '–', '—', '˜', '™', 'š', '›', 'œ', 'ž', 'Ÿ', '¡', '¢', '£', '¤', '¥', '¦', '¨', '©', 'ª', '«', '¬', '®', '¯', '°', '±', '²', '³', '´', 'µ', '·', '¸', '¹', 'º', '»', '¼', '½', '¾', '¿', 'À', 'Á', 'Â', 'Ã', 'Ä', 'Æ', 'Ç', 'È', 'É', 'Ê', 'Ë', 'Ì', 'Í', 'Î', 'Ï', 'Ð', 'Ñ', 'Ò', 'Ó', 'Ô', 'Õ', 'Ö', '×', 'Ø', 'Ù', 'Ú', 'Û', 'Ü', 'Ý', 'Þ', 'ß', 'à', 'á', 'â', 'ã', 'ä', 'å', 'æ', 'ç', 'è', 'é', 'ê', 'ë', 'ì', 'í', 'î', 'ï', 'ð', 'ñ', 'ò', 'ó', 'ô', 'õ', 'ö', '÷', 'ø', 'ù', 'ú', 'û', 'ü', 'ý', 'þ', 'ÿ', 'Å', '₧', '⌐', '░', '▒', '▓', '│', '┤', '╡', '╢', '╖', '╕', '╣', '║', '╗', '╝', '╜', '╛', '┐', '└', '┴', '┬', '├', '─', '┼', '╞', '╟', '╚', '╔', '╩', '╦', '╠', '═', '╬', '╧', '╨', '╤', '╥', '╙', '╘', '╒', '╓', '╫', '╪', '┘', '┌', '█', '▄', '▌', '▐', '▀', 'α', 'Γ', 'π', 'Σ', 'σ', 'τ', 'Φ', 'Θ', 'Ω', 'δ', '∞', 'φ', 'ε', '∩', '≡', '≥', '≤', '⌠', '⌡', '≈', '∙', '√', 'ⁿ', '■', '1', '2', '3', '4', '5', '6', '7', '8', '9', ' ')


_rotor_1_external =     ('D', 'u', '╒', 'ü', 'ô', '±', '⌠', 'o', 'Δ', '♂', '┴', 'Ý', '◙', 'Ω', 'À', '9', '‡', '╘', '©', '☻', 'τ', '”', 'ž', '…', '►', 'Ç', '™', 'æ', 'Ø', 'Γ', 'H', 'U', 'E', ':', '¥', '═', '←', 'q', 'g', 'Θ', '$', '4', 'ò', '´', '°', '╟', '¤', '¾', 'Æ', '♪', 'î', 'ë', '▄', 'i', '┘', '╜', '¦', 'Ü', 'È', '„', 'Ó', '¢', '√', '╡', 'F', 'z', 'Ù', '├', 'Å', 'c', '€', '╪', 't', '┐', '¼', 'è', 'Õ', '┌', '☺', '¹', '%', 'ⁿ', '◘', '¬', '∞', '“', ',', 'ç', 'ê', '¸', '?', 'Z', '·', 'í', '╣', 'ý', '*', '┬', '⌐', 'ß', '½', '8', '≥', '3', '↕', 'Ï', '', 'Ð', 'Ê', '╛', 'å', '-', 'f', ';', '└', '×', '♠', '∩', ')', 'G', '▐', 'á', 'α', '■', 'ú', '7', 'T', 'ª', 'k', 'Σ', 'š', 'Y', 'n', '╖', '.', '`', '╤', '║', '∟', '☼', 'â', 'ï', 'a', '²', '6', '░', '˜', 'ã', '¿', '^', '5', 'C', 'd', '@', "'", '«', '≡', '▌', '#', 'R', '’', '╢', 'b', '╓', 'ƒ', 'e', '╨', 'Û', 'M', '+', 'P', 'Ã', '╦', '›', 'Ò', '1', 'Â', '/', 'Ž', '‚', 'ÿ', '"', '®', 'ä', 'ñ', '(', 'Í', 'þ', '↨', 'à', '│', '†', '~', 'φ', '╞', '╥', '_', 'Á', '‹', '=', '╗', '╝', 'ù', 'Φ', '─', 'Ô', '¡', 'A', 'J', 'µ', '╧', 's', 'ó', 'h', '╔', 'p', 'º', 'Ú', 'W', 'r', '£', '₧', 'Þ', '╠', '↔', 'I', 'Ö', ' ', '2', 'ε', '÷', '↑', 'K', '▼', 'π', '', '‰', '∙', 'S', 'Ÿ', '¨', '§', '–', 'õ', '╕', 'Ä', 'Q', 'σ', '¯', 'ð', 'X', 'Ë', '‘', '»', '▒', 'ˆ', '³', 'B', '♥', '♫', '→', 'δ', 'm', 'ø', 'Š', '╩', '┤', 'ö', 'é', '♀', 'û', '<', '▀', '↓', '▲', '╬', '¶', '◄', 'w', '•', '>', 'L', 'œ', '‼', '}', 'V', '╚', '≈', '▓', 'É', '—', '┼', '╫', '≤', 'O', 'x', '{', '▬', '♣', 'l', '○', 'ì', 'Œ', 'Ñ', 'N', '&', 'v', 'j', '|', 'Î', '⌡', '♦', 'y', '╙', 'Ì', '█')
_rotor_1_internal =     ('½', '¢', 'ü', '≈', '2', 'U', 'è', 'ÿ', '1', 'µ', 'π', 'Œ', '5', ')', 'õ', '♫', 'È', '3', '┼', '»', '—', 'ð', '€', 'é', '◘', '░', '↨', 'E', '¯', 'Ê', 'W', '☼', 'ì', '–', 'š', '♣', '╜', 'Ò', 't', '8', '·', '|', 'w', '¿', '▼', '╔', 'ß', '‘', '→', '│', '', 'u', '╚', '‹', '¨', 'p', '╖', 'Ñ', '<', '╗', '╕', 'S', '∞', '>', '’', '═', 'Z', '╬', '”', '┘', '▐', '╥', 'X', 'O', '›', '™', 'ò', 'y', '‡', 'C', 'φ', '╦', 'σ', 'ä', '↓', 'r', 'Σ', '`', '“', 'Ω', '╡', 'V', '┐', '¥', 'Ü', 'œ', 'Î', 'º', '╩', 'ö', 'D', 'Â', '"', '_', '/', '{', '╒', '÷', '₧', 'Ó', '=', 'í', 'Á', 'k', 'Φ', '#', 'ç', '.', 'Í', '○', '▌', '4', "'", '╨', '„', 'α', 'à', '√', 'A', 'm', 'ô', '©', '╓', '╝', 'Ã', 'ñ', '}', 'Y', 'ú', 'B', '♥', 'x', '▲', '¬', '', 'Ô', '≡', 'b', '╤', '┌', 'É', '^', '▄', '²', 'F', 'c', 'n', ',', 'þ', 'ƒ', '╣', 'ï', '▒', '†', 'ˆ', '╞', 'Q', '‼', '£', '☻', '┴', '╘', '■', 'á', 'j', 'G', '♂', '$', 'h', 'ª', '•', ' ', '☺', '∟', 'H', '‰', 'å', '¤', 'e', '(', '≤', '♠', '&', ':', '╛', '˜', 'ø', '╪', 'Θ', 'K', '╙', '¦', 'ê', '╫', 'ë', 'Ø', '♪', 'L', '¶', '▀', '…', '@', '¼', '®', '▓', '?', 'ž', 'δ', 'û', 'Š', '⌐', '~', 'Û', 'ã', 'Ž', 'T', 'Ù', 'd', 'Õ', 'Ç', 'v', 'Ð', 'Ì', '↕', '7', 'Ä', 'R', 'â', '‚', 'ù', 'M', 'l', 'o', 'I', '⌠', '◙', 'Ÿ', '*', '─', 'q', 'τ', 'Þ', '¾', '♀', '¡', 'î', 'Δ', 'z', 'ε', '↔', '∙', '⌡', 's', '6', 'Ï', 'N', '←', '«', 'Ý', 'Ë', '├', '╠', '╢', '±', '+', 'f', 'Å', '×', '╧', 'Ú', '%', '╟', '§', '↑', '9', '└', '≥', '∩', '¹', 'æ', 'Ö', '³', 'ó', ';', '◄', '´', 'Æ', 'i', '┬', 'Γ', '║', '°', '┤', '¸', 'J', '█', 'a', 'ý', '▬', '♦', 'ⁿ', 'g', 'P', '-', '►', 'À')


_rotor_2_external =      ('', '╒', '–', '¶', '¹', '╣', 'R', '₧', 'þ', '≥', 'w', '‰', '⌠', 'Ó', '¢', '4', 'Á', '¦', '~', 'g', '3', 'ô', 'u', '╤', 'á', 'Ž', 'ß', '¼', '↔', '»', '>', '-', ')', 'Æ', '╪', 'B', '´', 'å', 'ƒ', '♣', 'i', '╛', 'φ', '☼', '×', '<', '¡', 'Å', 'ó', ' ', '”', '■', 'Œ', '¬', '◄', 'Ú', 'U', '▌', '®', '$', '_', 'a', 'T', '▄', 't', 'l', 'æ', 'µ', '║', ':', '“', '8', '™', '+', 'ú', 'ⁿ', 'Γ', 'ñ', '≡', 'Ñ', '↨', 'σ', '%', 'Ô', 'p', 'h', '„', '‚', '▲', 'ý', 'ε', '', 'C', 'π', '|', '╢', 'Š', '¥', ',', '∟', 'ê', '"', '˜', '═', 'd', 'Î', 'O', 'L', 'Ê', '/', 'ü', '♥', '°', 's', 'À', 'û', 'Ý', 'Z', 'Y', 'W', 'Ö', 'Ü', 'Ò', 'Ì', 'í', 'Ù', 'â', '…', 'q', '╧', '├', 'î', '²', '╫', '╚', 'ì', 'o', '╖', 'N', 'Ø', 'Ï', '┐', 'Õ', '•', '☻', 'œ', 'E', '▬', 'ð', '╥', '©', 'ª', 'Í', '¾', 'è', 'v', '┴', 'Ë', '►', '§', '◙', '‘', 'ˆ', 'È', '‡', '▒', 'P', 'τ', '♫', 'ù', '÷', 'F', 'A', '╠', '╗', '†', 'Σ', 'm', '.', '⌐', '╞', 'H', 'c', '┬', '♦', 'e', '≈', 'Ã', '*', 'ï', '▓', '±', '2', 'Ÿ', '—', 'Q', '(', '↓', 'ö', 'ò', '‹', 'à', '£', '╓', '╡', '♠', '∙', 'ø', '=', 'I', '█', 'J', 'b', ';', 'f', '@', '◘', '╨', 'K', '↑', 'º', '┼', 'k', 'ä', 'ž', '¯', '○', '╔', '╝', '∩', '│', '→', '?', '¤', '³', 'Þ', '9', '¿', 'Â', "'", '{', 'Û', 'õ', 'j', '}', '↕', 'É', '─', '╩', '½', '5', '⌡', '€', '’', '·', '╜', '╬', 'G', '←', '6', 'ÿ', '☺', '♂', '┤', '1', 'X', 'Θ', 'y', 'Φ', 'Ð', '▼', 'α', '╘', '∞', 'Ä', 'r', '¸', '`', 'Ω', 'V', 'Δ', 'n', 'ë', '╙', 'M', '&', '░', 'Ç', 'z', '♀', '▀', 'δ', '┘', '└', '╦', 'S', '‼', '♪', '#', '¨', 'š', '┌', '7', 'D', '^', '√', 'ç', '«', '▐', 'é', '╟', '≤', 'x', 'ã', '╕', '›')
_rotor_2_internal =      ('g', '╔', '1', '+', 'ì', 'Σ', '~', '☻', 'ç', '5', 'ý', 'ò', 'φ', '⌡', 'Å', '═', '▲', '¢', 'V', '↔', 'ÿ', 'œ', 'i', '˜', '■', 'Ü', 'à', '¶', '3', 'æ', 'p', '', '▼', 'Œ', 'w', '$', 'ø', ',', '€', 'û', '@', "'", '∞', '☺', '¡', '└', 'š', '%', '╛', 'ε', '▒', 'L', ':', 'Ë', 'Ø', '┼', '´', '√', 'ë', '○', '(', 'α', '│', 'Ï', 'N', '„', 'A', '╖', '♦', '`', '»', '-', 'Δ', 'Ç', 'Ì', '╚', '▬', '½', '¿', 'ó', 'T', ' ', 'é', 'È', 'ñ', 'h', '♣', '?', 'Ý', 'ä', 'j', '▀', '—', '╒', '╙', '↓', 'ß', 'I', '"', '÷', 'ƒ', '≤', 'Φ', '‘', '░', 'Ñ', 'â', 'o', '╕', '7', '2', '8', '', 'Û', 'E', 'õ', '╠', 'R', 'b', 'Š', 'δ', '”', '¬', '▐', '*', '╤', '9', 'ú', '▄', 'Á', '╥', '¤', '™', '╞', '╟', 'm', 'ð', '§', 'U', 'å', '┐', 'ê', 'Î', '☼', '‼', 'Ã', '#', 'd', 'Ô', '╘', 'M', '╝', '∩', 'ª', 'π', '«', '♠', '“', '╫', 'á', '─', 'µ', '¯', '¦', '►', '╪', 'Z', 'î', '≡', '╬', '┘', '|', '…', '╢', 'S', '≈', '_', '◘', '╜', '‚', 's', '±', 'J', '4', 'À', '┬', '·', 'D', ')', 'f', 'Γ', '×', 'Í', '¾', 'O', '=', '¼', 'Ω', '╦', 'ã', 'r', '³', '▌', 'Ÿ', 'Õ', '↨', '║', 'Ú', 'ˆ', 'B', 'q', 'Ä', 'Ö', '.', '▓', '•', 'σ', 'u', 'τ', '>', '♪', 'P', '≥', 'k', 'X', '^', 'Þ', ';', '–', '‡', 'C', '♥', '↕', '¹', '£', 'z', '♫', '╧', '⌐', 'þ', '†', '┤', 'Y', 'º', 'Ù', 't', '‹', '┌', '╨', '╩', 'a', '²', 'É', '╓', 'ô', 'ü', 'í', 'e', 'ž', 'ù', '<', '₧', '╣', '█', '◙', 'Θ', 'K', '6', '↑', '╡', 'H', '{', 'Æ', '}', '›', 'Â', '∙', '♀', '∟', 'Ð', 'ö', '¥', '╗', 'Ò', 'G', '♂', '®', 'Ó', 'v', 'è', 'Ž', '/', '’', 'W', '←', '◄', 'x', 'c', '©', 'F', '‰', 'Ê', '°', 'ⁿ', 'l', 'Q', 'y', 'ï', '&', '┴', '¨', '¸', 'n', '├', '⌠', '→')


_rotor_reflector_external = ('☺', '¿', '☻', 'Å', '♥', 'ⁿ', '♦', '6', '♣', 'Ù', '♠', '}', '•', 'ê', '◘', '─', '○', 'W', '◙', ';', '♂', 'b', '♀', '▒', '♪', 'á', '♫', '·', '☼', 'σ', '►', 'V', '◄', 'Ï', '↕', 'g', '‼', 'G', '¶', '>', '§', 'Ë', '▬', 'F', '↨', '8', '↑', 'l', '↓', '®', '→', '┴', '←', 'a', '∟', '╚', '↔', '▲', '▼', '╦', 'A', '▀', '"', 'z', '#', '9', '$', 'ƒ', '%', 'š', '&', '╪', "'", '»', '(', 'õ', ')', 'Ô', '*', 'y', '+', '˜', ',', 'v', '-', 'ú', '.', 'ò', '/', '╬', ':', '”', '<', '╥', '=', 'Æ', '?', '≤', '@', 'L', 'B', 'Z', 'C', 'ù', 'D', '▐', 'E', '{', 'H', '├', 'I', 'ç', 'J', '—', 'K', 'Ì', 'M', '„', 'N', '╨', 'O', 's', 'P', 'Q', 'R', 'é', 'S', 'Û', 'T', '╢', 'U', 'j', 'X', '^', 'Y', '3', '', '¦', '', ' ', '_', 'ó', '`', '┬', 'c', 'ñ', 'd', 'φ', 'e', 'i', 'f', '┌', 'h', '╩', 'k', '┼', 'm', '╛', 'n', '×', 'o', '‚', 'p', 'ø', 'q', '†', 'r', '▄', 't', 'Ø', 'u', 'ˆ', 'w', '‘', 'x', '╖', '|', '═', '~', 'â', 'Δ', 'µ', '€', '⌐', '…', '‡', '╫', '‰', '▌', 'Š', '5', '‹', '4', 'Œ', '┤', 'Ž', '║', '’', 'Ü', '“', '⌡', '–', '╜', '™', 'ß', '›', '╠', 'œ', 'ì', 'ž', '±', 'Ÿ', '£', '¡', 'Ê', '¢', 'Þ', '¤', '÷', '¥', '²', '¨', '½', '©', 'ë', 'ª', '7', '«', 'ã', '¬', '∞', '¯', 'æ', '°', '┐', '³', '´', '¸', 'È', '¹', '╧', 'º', 'Φ', '¼', 'Γ', '¾', 'δ', 'À', 'å', 'Á', 'Ò', 'Â', 'É', 'Ã', 'à', 'Ä', '▓', 'Ç', '╙', 'Í', '╣', 'Î', 'ð', 'Ð', '≈', 'Ñ', '⌠', 'Ó', 'î', 'Õ', '╒', 'Ö', '░', 'Ú', 'Ý', '│', 'ä', '╟', 'è', 'ï', 'í', '╘', 'ô', '╡', 'ö', '√', 'û', '╔', 'ü', '1', 'ý', '█', 'þ', '└', 'ÿ', '≡', '₧', 'α', '╕', 'π', '╗', '╓', '╝', 'Θ', '╞', '∩', '╤', 'τ', '┘', '≥', 'Σ', '∙', 'Ω', '2', 'ε', '■')
_rotor_reflector_internal = ('¿', '☺', 'Å', '☻', 'ⁿ', '♥', '6', '♦', 'Ù', '♣', '}', '♠', 'ê', '•', '─', '◘', 'W', '○', ';', '◙', 'b', '♂', '▒', '♀', 'á', '♪', '·', '♫', 'σ', '☼', 'V', '►', 'Ï', '◄', 'g', '↕', 'G', '‼', '>', '¶', 'Ë', '§', 'F', '▬', '8', '↨', 'l', '↑', '®', '↓', '┴', '→', 'a', '←', '╚', '∟', '▲', '↔', '╦', '▼', '▀', 'A', 'z', '"', '9', '#', 'ƒ', '$', 'š', '%', '╪', '&', '»', "'", 'õ', '(', 'Ô', ')', 'y', '*', '˜', '+', 'v', ',', 'ú', '-', 'ò', '.', '╬', '/', '”', ':', '╥', '<', 'Æ', '=', '≤', '?', 'L', '@', 'Z', 'B', 'ù', 'C', '▐', 'D', '{', 'E', '├', 'H', 'ç', 'I', '—', 'J', 'Ì', 'K', '„', 'M', '╨', 'N', 's', 'O', 'Q', 'P', 'é', 'R', 'Û', 'S', '╢', 'T', 'j', 'U', '^', 'X', '3', 'Y', '¦', '', ' ', '', 'ó', '_', '┬', '`', 'ñ', 'c', 'φ', 'd', 'i', 'e', '┌', 'f', '╩', 'h', '┼', 'k', '╛', 'm', '×', 'n', '‚', 'o', 'ø', 'p', '†', 'q', '▄', 'r', 'Ø', 't', 'ˆ', 'u', '‘', 'w', '╖', 'x', '═', '|', 'â', '~', 'µ', 'Δ', '⌐', '€', '…', '╫', '‡', '▌', '‰', '5', 'Š', '4', '‹', '┤', 'Œ', '║', 'Ž', 'Ü', '’', '⌡', '“', '╜', '–', 'ß', '™', '╠', '›', 'ì', 'œ', '±', 'ž', '£', 'Ÿ', 'Ê', '¡', 'Þ', '¢', '÷', '¤', '²', '¥', '½', '¨', 'ë', '©', '7', 'ª', 'ã', '«', '∞', '¬', 'æ', '¯', '┐', '°', '´', '³', 'È', '¸', '╧', '¹', 'Φ', 'º', 'Γ', '¼', 'δ', '¾', 'å', 'À', 'Ò', 'Á', 'É', 'Â', 'à', 'Ã', '▓', 'Ä', '╙', 'Ç', '╣', 'Í', 'ð', 'Î', '≈', 'Ð', '⌠', 'Ñ', 'î', 'Ó', '╒', 'Õ', '░', 'Ö', 'Ú', '│', 'Ý', '╟', 'ä', 'ï', 'è', '╘', 'í', '╡', 'ô', '√', 'ö', '╔', 'û', '1', 'ü', '█', 'ý', '└', 'þ', '≡', 'ÿ', 'α', '₧', 'π', '╕', '╓', '╗', 'Θ', '╝', '∩', '╞', 'τ', '╤', '≥', '┘', '∙', 'Σ', '2', 'Ω', 'ε', '■')


# Returns the letter that is in the posiiton of number in source.
def number_to_letter(source, number):
    return source[number]

# Returns the number of the position of letter in source.
def letter_to_number(source, letter):
    return source.index(letter)

def encript(message):

    # If the input has the initial letters of the rotors, remove them from the input and set them as the position of the rotors.
    if message[0] in alphabet and message[1] == " " and message[2] in alphabet and message[3] == " " and message[4] in alphabet and message[5] == " ":
        _position_rotor_1 = letter_to_number(letter=message[0], source=alphabet)
        _position_rotor_2 = letter_to_number(letter=message[2], source=alphabet)
        _position_reflector = letter_to_number(letter=message[4], source=alphabet)
        message = message[6:len(message)]
    else:
        _position_rotor_1 = randrange(len(alphabet)-1)
        _position_rotor_2 = randrange(len(alphabet)-1)
        _position_reflector = randrange(len(alphabet)-1)

    # Write the initial position of the rotors in _out.
    _out = ""
    _out += number_to_letter(source=alphabet, number=_position_rotor_1) + " " + number_to_letter(source=alphabet, number=_position_rotor_2) + " " + number_to_letter(source=alphabet, number=_position_reflector) + " "
    
    _max = len(alphabet) - 1
    _min = 0
    _add_substract = len(alphabet)
    # Encript each letter of the input one by one.
    for letter in message:
        if letter in alphabet:
            number = int(letter_to_number(source=alphabet, letter=letter))
            number -= _position_rotor_1
            number += 1

            if number > _max: number -= _add_substract
            elif number < _min: number += _add_substract

            #---------------------
            #---------------------

            letter = number_to_letter(source=_rotor_1_external, number=number)
            
            number = int(letter_to_number(source=_rotor_1_internal, letter=letter))
            number += _position_rotor_1
            number -= _position_rotor_2

            if number > _max: number -= _add_substract
            elif number < _min: number += _add_substract
        
            #---------------------

            letter = number_to_letter(source=_rotor_2_external, number=number)

            number = int(letter_to_number(source=_rotor_2_internal, letter=letter))
            number += _position_rotor_2
            number -= _position_reflector

            if number > _max: number -= _add_substract
            elif number < _min: number += _add_substract

            #---------------------
            #---------------------

            letter = number_to_letter(source=_rotor_reflector_external, number=number)

            number = int(letter_to_number(source=_rotor_reflector_internal, letter=letter))
            number += _position_reflector
            number -= _position_rotor_2

            if number > _max: number -= _add_substract
            elif number < _min: number += _add_substract

            #---------------------
            #---------------------

            letter = number_to_letter(source=_rotor_2_internal, number=number)

            number = int(letter_to_number(source=_rotor_2_external, letter=letter))
            number += _position_rotor_2
            number -= _position_rotor_1

            if number > _max: number -= _add_substract
            elif number < _min: number += _add_substract

            #---------------------

            letter = number_to_letter(source=_rotor_1_internal, number=number)

            number = int(letter_to_number(source=_rotor_1_external, letter=letter))
            number += _position_rotor_1
            number -= 1

            # print("k before: " + str(k))

            if number > _max: number -= _add_substract
            elif number < _min: number += _add_substract

            #---------------------
            #---------------------

            # print("k after: " + str(k))
            _out += number_to_letter(source=alphabet, number=number)

        else: 
            print(letter + "is not in the alphabet")
    
        _position_rotor_1 += 1

        if _position_rotor_1 == len(alphabet):
            _position_rotor_1 = 1
            _position_rotor_2 += 1

        if _position_rotor_2 == len(alphabet):
            _position_rotor_2 = 1
            _position_reflector += 1
            
        if _position_reflector == len(alphabet):
            _position_reflector = 1

    print(_out)

while True:
    _input = input("Enter message: ")
    message_encripted = encript(message=_input)
